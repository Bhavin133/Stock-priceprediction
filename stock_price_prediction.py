# -*- coding: utf-8 -*-
"""Stock_Price_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TwamDK321nfyf9I-MDPQ9YB0-eWiBpSJ
"""

!pip install streamlit yfinance pandas numpy matplotlib scikit-learn tensorflow

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout

# Streamlit-based Stock Price Prediction App
def get_stock_data(stock_symbol, start_date, end_date):
    return yf.download(stock_symbol, start=start_date, end=end_date)

def preprocess_data(df):
    data = df['Close'].values.reshape(-1, 1)
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data)
    return scaled_data, scaler

def create_sequences(data, seq_length):
    X, y = [], []
    for i in range(seq_length, len(data)):
        X.append(data[i-seq_length:i, 0])
        y.append(data[i, 0])
    return np.array(X), np.array(y)

def build_model():
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(60, 1)))
    model.add(Dropout(0.2))
    model.add(LSTM(units=50, return_sequences=False))
    model.add(Dropout(0.2))
    model.add(Dense(units=25))
    model.add(Dense(units=1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Get user inputs for stock ticker and date range
stock_symbol = 'AAPL'  # Set default stock symbol
start_date = '2015-01-01'
end_date = '2023-11-17'

# Fetch stock data and display it
df = get_stock_data(stock_symbol, start_date, end_date)
scaled_data, scaler = preprocess_data(df)

# Prepare data for training
seq_length = 60
X, y = create_sequences(scaled_data, seq_length)
X = X.reshape(X.shape[0], X.shape[1], 1)

# Train the LSTM model
model = build_model()
model.fit(X, y, epochs=5, batch_size=32, verbose=1)

# Make predictions on recent data
test_data = scaled_data[-seq_length:]
X_test = np.array([test_data])
X_test = X_test.reshape((1, seq_length, 1))
predicted_price = model.predict(X_test)
predicted_price = scaler.inverse_transform(predicted_price)

# Display prediction
print(f"Predicted Stock Price for {stock_symbol}: {predicted_price[0][0]:.2f} USD")

!pip install streamlit
!streamlit run app.py & npx localtunnel --port 8501





